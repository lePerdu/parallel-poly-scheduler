# Parallel and Distributed Computing Project

# We use C++11
LOCAL_CXXFLAGS := -std=c++11

# Default warnings
CXXFLAGS ?= -Wall

MPICXX ?= mpiCC

# MPI-specific flags
MPI_CXXFLAGS ?=
MPI_LDFLAGS ?=

# Combine them for simplicity
LOCAL_CXXFLAGS += $(MPI_CXXFLAGS)
LOCAL_LDFLAGS += $(MPI_LDFLAGS)

ifdef PRODUCTION
# Turn off asserts and turn on optimizations
LOCAL_CXXFLAGS += -DNDEBUG -O3
else
LOCAL_CXXFLAGS += -g -Og
endif

# JSON library includes
NLOHMANN_JSON := nlohmann_json
LOCAL_CXXFLAGS += -I$(NLOHMANN_JSON)/single_include

SRC := src
BUILD := build
BIN := bin
TEST := test
TEST_BIN := $(BIN)/$(TEST)

SOURCES := $(wildcard $(SRC)/*.cpp)
OBJECTS := $(patsubst $(SRC)/%.cpp,$(BUILD)/%.o,$(SOURCES))

MAIN_OBJECT := $(BUILD)/main.o
LIB_OBJECTS := $(filter-out $(MAIN_OBJECT),$(OBJECTS))

TEST_CXXFLAGS := -I$(SRC)

TEST_SOURCES := $(wildcard $(TEST)/*.cpp)
TEST_EXECS := $(patsubst $(TEST)/%.cpp,$(TEST_BIN)/%,$(TEST_SOURCES))

LIBRARY := $(BIN)/libscheduler.a
TARGET := $(BIN)/parallel_scheduler

CLANG_FORMAT := clang-format

all: $(TARGET)

$(LIBRARY): $(LIB_OBJECTS) | $(BIN)
	$(AR) rs $@ $^

$(TARGET): $(MAIN_OBJECT) $(LIBRARY) | $(BIN)
	$(MPICXX) $(LOCAL_LDFLAGS) $(LDFLAGS) -o $@ $^

$(BUILD)/%.o: $(SRC)/%.cpp | $(BUILD)
	$(MPICXX) $(LOCAL_CXXFLAGS) $(CXXFLAGS) -MMD -c -o $@ $<

$(TEST_BIN)/%: $(TEST)/%.cpp $(LIBRARY) | $(TEST_BIN)
	$(MPICXX) $(TEST_CXXFLAGS) $(LOCAL_CXXFLAGS) $(CXXFLAGS) $(LOCAL_LDFLAGS) $(LDFLAGS) -o $@ $^

$(BUILD):
	@mkdir -p $@

$(BIN):
	@mkdir -p $@

$(TEST_BIN):
	@mkdir -p $@

tests: $(TEST_EXECS)

define runtest
	@echo "### Running test" $(basename $(1)) "###"
	$(1)
	@echo "### Test finished ###"
endef

runtests: tests
	$(foreach test_exec,$(TEST_EXECS),$(call runtest,$(test_exec)))

format:
	$(CLANG_FORMAT) -i $(SRC)/* $(TEST)/*

clean:
	rm -rf $(BUILD) $(BIN)

.PHONY: all tests runtests format clean

# Include dependency files generated by the compiler (see -MMD option)
-include $(BUILD)/*.d
